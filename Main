package recoursions;

public class Main 
{
	public static void main (String[]args) 
	{
		int [] a = {0,1,2,39,24,5,6,7,8};
		System.out.println(sumToI(a, 3));
		System.out.println(howManyPositive(a, 4));
		int [] w = {1,2,3,4,1,6,7,8};
		System.out.println(index( w, 0, -1, w.length-1));
		System.out.println(i( w, 0, w.length-1));
		System.out.println(isGoingUp(w , w.length -1));
		int [] s = {9,8,8,4};
		System.out.println(isNoPrime( s, s.length -1));
	}
	
	public static boolean isPrime(int n , int x)
	{
		if (n == 1)
		{
			return true;
		}
		if (n == 0)
		{
			return false;
		}
		if (x == n)
		{
			return true;
		}
		if (n%x == 0)
		{
			return false;
		} 
		return isPrime(n, x+1);
	}
	
	public static int sumToI(int [] a, int i)
	{
		if (i == 0)
			return a[i];
		
		if (i == a.length -1)
			return a[a.length -1];
		return sumToI(a, i+1)+a[i];
	}
	
	 public static int howManyPositive(int [] a, int i)
	 {
		 if (i == 0)
		 {	 if (a[i]>0)
			 return 1;
		 else
			 return 0;
		 }
		 if (a[i]>0)
			 return howManyPositive(a, i-1)+1;
		 else
			 return howManyPositive(a, i-1);
	 }

	public static int index(int [] a, int n, int c, int i)
	{
		if (a[i] == n )
		{
			return i;
		}
		
		if (i == 0)
		{
			return c;
		}
		
		return index(a, n, c, i-1);
	}
	
	public static int i(int [] a, int n, int count)
	{
		if (count == -1)
		{
			return -1;
		}
		
		if (a[count] == n)
		{
			return count;
		}
		
		return i(a,n,count-1);
	}
	
	public static boolean isGoingUp(int [] a, int i)
	{
		if (i == 0)
		{
			return true;
		}
			
		if (a[i] < a[i-1])
		{
			return false;
		}
		
		return isGoingUp(a, i-1);
	}
	
	public static boolean isNoPrime(int [] a, int i)
	{
		if (isPrime(a[i], 2) == true)
		{
			return false;
		}
		
		if (i == 0)
		{
			return true;
		}
		
		return isNoPrime(a, i-1);
	}	
}
